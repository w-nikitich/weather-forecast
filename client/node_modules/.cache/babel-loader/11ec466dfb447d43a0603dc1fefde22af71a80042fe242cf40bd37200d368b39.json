{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\weather_forecast\\\\weather-app\\\\client\\\\src\\\\components\\\\WeatherInput.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { DEFAULT_LOCATION } from \"../config\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport WeatherOutput from './WeatherOutput';\nimport { WEATHER_DATA, DAY_OF_WEEK } from '../constants.js';\nimport * as http from '../http';\nimport * as helpers from '../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherInput() {\n  _s();\n  const localStorageLocation = localStorage.getItem('location') || DEFAULT_LOCATION; // city\n  const [location, setLocation] = useState(localStorageLocation);\n  const [forecast, setForecast] = useState([{\n    day: 'current',\n    temp: '',\n    minTemp: '',\n    maxTemp: '',\n    feels_like: '',\n    descr: ''\n  }]);\n  const [icon, setIcon] = useState('');\n  useEffect(() => {\n    localStorage.setItem('location', location);\n    forecast.map(val => {\n      Object.keys(WEATHER_DATA).map((key, value) => {\n        if (key == val.descr.toLowerCase()) {\n          setIcon(WEATHER_DATA[key]);\n        }\n      });\n    });\n  }, [location, forecast]);\n  useEffect(() => {\n    async function fetchData() {\n      await getWeatherData();\n    }\n    fetchData();\n    forecast.forEach((value, index) => {\n      /*#__PURE__*/_jsxDEV(WeatherOutput, {\n        forecastData: value,\n        icon: icon,\n        day: value.day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this);\n    });\n  }, []);\n  function changeHandler(event) {\n    setLocation(event.target.value);\n  }\n  async function getWeatherData() {\n    let cityStr = document.getElementsByClassName('weather__location')[0].getElementsByTagName('p')[0].innerHTML;\n    try {\n      cityStr = `Your city: ${location}`; // || location\n\n      const locationRes = await http.getLocation(location);\n      const weatherRes = await http.getWeather(locationRes);\n      const forecastRes = await http.getForecast(locationRes);\n      const updateForecast = [{\n        day: 'current',\n        temp: weatherRes.main.temp,\n        feels_like: weatherRes.main.feels_like,\n        descr: weatherRes.weather[0].main\n      }];\n      for (const day of forecastRes) {\n        updateForecast.push({\n          day: DAY_OF_WEEK[await helpers.getShortNameOfDay(day.date_epoch)],\n          temp: day.hour[6].temp_c,\n          feels_like: day.hour[6].feelslike_c,\n          descr: day.hour[6].condition.text\n        });\n      }\n      setForecast(updateForecast);\n    } catch (error) {\n      cityStr = 'Sorry, there is not such city.';\n    }\n  }\n  async function searchLocation(event) {\n    if (event.key == 'Enter') {\n      await getWeatherData();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather__location\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: location,\n          onChange: changeHandler,\n          placeholder: \"Enter location\",\n          onKeyDown: searchLocation,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Your city: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather__forecast\",\n        children: new Array(forecast.length).fill().map((value, index) => /*#__PURE__*/_jsxDEV(WeatherOutput, {\n          forecastData: forecast[index],\n          icon: icon,\n          day: forecast[index].day\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 78\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n_s(WeatherInput, \"6gTZSwFGh5zRRfUJpLFT0lxnAEE=\");\n_c = WeatherInput;\nexport default WeatherInput;\nvar _c;\n$RefreshReg$(_c, \"WeatherInput\");","map":{"version":3,"names":["axios","React","useEffect","useState","DEFAULT_LOCATION","Container","WeatherOutput","WEATHER_DATA","DAY_OF_WEEK","http","helpers","jsxDEV","_jsxDEV","WeatherInput","_s","localStorageLocation","localStorage","getItem","location","setLocation","forecast","setForecast","day","temp","minTemp","maxTemp","feels_like","descr","icon","setIcon","setItem","map","val","Object","keys","key","value","toLowerCase","fetchData","getWeatherData","forEach","index","forecastData","fileName","_jsxFileName","lineNumber","columnNumber","changeHandler","event","target","cityStr","document","getElementsByClassName","getElementsByTagName","innerHTML","locationRes","getLocation","weatherRes","getWeather","forecastRes","getForecast","updateForecast","main","weather","push","getShortNameOfDay","date_epoch","hour","temp_c","feelslike_c","condition","text","error","searchLocation","className","children","onChange","placeholder","onKeyDown","type","Array","length","fill","_c","$RefreshReg$"],"sources":["D:/GitHub/weather_forecast/weather-app/client/src/components/WeatherInput.js"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { DEFAULT_LOCATION } from \"../config\";\r\nimport Container from \"react-bootstrap/esm/Container\";\r\nimport WeatherOutput from './WeatherOutput';\r\nimport {WEATHER_DATA, DAY_OF_WEEK} from '../constants.js';\r\nimport * as http from '../http';\r\nimport * as helpers from '../helpers';\r\n\r\nfunction WeatherInput() {\r\n    const localStorageLocation = localStorage.getItem('location') || DEFAULT_LOCATION; // city\r\n    const [location, setLocation] = useState(localStorageLocation); \r\n    const [forecast, setForecast] = useState([{\r\n        day: 'current',\r\n        temp: '',\r\n        minTemp: '',\r\n        maxTemp: '',\r\n        feels_like: '',\r\n        descr: '',\r\n    }]);\r\n\r\n    const [icon, setIcon] = useState('');\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('location', location);\r\n        \r\n        forecast.map((val) => {\r\n            Object.keys(WEATHER_DATA).map((key, value) => {\r\n                if (key == val.descr.toLowerCase()) {\r\n                    setIcon(WEATHER_DATA[key]);\r\n                }\r\n            });\r\n        })\r\n\r\n    }, [location, forecast]); \r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n           await getWeatherData();\r\n        }\r\n        fetchData()\r\n\r\n        forecast.forEach((value, index) => {\r\n            <WeatherOutput forecastData={value} icon={icon} day={value.day}/>\r\n        });\r\n\r\n    }, []);\r\n\r\n    function changeHandler(event) {\r\n        setLocation(event.target.value);\r\n    }\r\n\r\n    async function getWeatherData() {\r\n        let cityStr = document.getElementsByClassName('weather__location')[0].getElementsByTagName('p')[0].innerHTML;\r\n\r\n        try {\r\n            cityStr = `Your city: ${location}`; // || location\r\n            \r\n            const locationRes = await http.getLocation(location);\r\n            const weatherRes = await http.getWeather(locationRes);\r\n            const forecastRes = await http.getForecast(locationRes);\r\n            const updateForecast = [{day: 'current', temp: weatherRes.main.temp, feels_like: weatherRes.main.feels_like, descr: weatherRes.weather[0].main}]\r\n            for (const day of forecastRes) {   \r\n                updateForecast.push({\r\n                    day: DAY_OF_WEEK[await helpers.getShortNameOfDay(day.date_epoch)],\r\n                    temp: day.hour[6].temp_c,\r\n                    feels_like: day.hour[6].feelslike_c,\r\n                    descr: day.hour[6].condition.text\r\n                })\r\n            }\r\n            \r\n\r\n            setForecast(updateForecast);\r\n\r\n        }\r\n        catch (error) {\r\n            cityStr = 'Sorry, there is not such city.';\r\n        }\r\n    }\r\n\r\n    async function searchLocation(event) {\r\n        if (event.key == 'Enter') {\r\n            await getWeatherData();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"weather\">\r\n            <Container>\r\n                <div className=\"weather__location\">\r\n                    <input \r\n                    value={location}\r\n                    onChange={changeHandler}\r\n                    placeholder=\"Enter location\"\r\n                    onKeyDown = {searchLocation}\r\n                    type=\"text\"/>\r\n\r\n                    <p>Your city: <span>{location}</span></p>\r\n                </div>\r\n                <div className=\"weather__forecast\">\r\n                    {new Array(forecast.length).fill().map((value, index) => <WeatherOutput forecastData={forecast[index]} icon={icon} day={forecast[index].day}/>)}\r\n                </div>\r\n                {/* <WeatherOutput forecastData={forecast} icon={icon} day={dayOfWeek[0]}/> */}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}